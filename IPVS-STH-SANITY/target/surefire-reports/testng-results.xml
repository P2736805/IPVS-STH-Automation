<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="3" ignored="2" total="34" passed="29">
  <reporter-output>
  </reporter-output>
  <suite name="Command line suite" duration-ms="33741" started-at="2019-04-30T04:57:20Z" finished-at="2019-04-30T04:57:54Z">
    <groups>
    </groups>
    <test name="Command line test" duration-ms="33741" started-at="2019-04-30T04:57:20Z" finished-at="2019-04-30T04:57:54Z">
      <class name="sth.ipvs.IPVSSmartTvTest">
        <test-method status="PASS" signature="setupSTHTest(java.lang.reflect.Method, org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="setupSTHTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:25Z" finished-at="2019-04-30T04:57:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sth.ipvs.IPVSSmartTvTest.ChannelsapiCHTR()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=ChannelsapiCHTR status=SUCCESS method=IPVSSmartTvTest.ChannelsapiCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSTHTest -->
        <test-method status="PASS" signature="testStartup()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="testStartup" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:25Z" finished-at="2019-04-30T04:57:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartup -->
        <test-method status="PASS" signature="ChannelsapiCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="ChannelsapiCHTR" duration-ms="3211" started-at="2019-04-30T04:57:25Z" finished-at="2019-04-30T04:57:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ChannelsapiCHTR -->
        <test-method status="PASS" signature="reportTest(org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="reportTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:28Z" finished-at="2019-04-30T04:57:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ChannelsapiCHTR status=SUCCESS method=IPVSSmartTvTest.ChannelsapiCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportTest -->
        <test-method status="PASS" signature="setupSTHTest(java.lang.reflect.Method, org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="setupSTHTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:28Z" finished-at="2019-04-30T04:57:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sth.ipvs.IPVSSmartTvTest.ChannelsapiTWC()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=ChannelsapiTWC status=SUCCESS method=IPVSSmartTvTest.ChannelsapiTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSTHTest -->
        <test-method status="PASS" signature="runCleanupMethods()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="runCleanupMethods" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:28Z" finished-at="2019-04-30T04:57:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCleanupMethods -->
        <test-method status="PASS" signature="ChannelsapiTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="ChannelsapiTWC" duration-ms="2802" started-at="2019-04-30T04:57:28Z" finished-at="2019-04-30T04:57:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ChannelsapiTWC -->
        <test-method status="PASS" signature="testStartup()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="testStartup" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:28Z" finished-at="2019-04-30T04:57:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartup -->
        <test-method status="PASS" signature="reportTest(org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="reportTest" is-config="true" duration-ms="2" started-at="2019-04-30T04:57:31Z" finished-at="2019-04-30T04:57:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ChannelsapiTWC status=SUCCESS method=IPVSSmartTvTest.ChannelsapiTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportTest -->
        <test-method status="PASS" signature="runCleanupMethods()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="runCleanupMethods" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:31Z" finished-at="2019-04-30T04:57:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCleanupMethods -->
        <test-method status="PASS" signature="setupSTHTest(java.lang.reflect.Method, org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="setupSTHTest" is-config="true" duration-ms="14" started-at="2019-04-30T04:57:31Z" finished-at="2019-04-30T04:57:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sth.ipvs.IPVSSmartTvTest.adobesessionCHTR()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=adobesessionCHTR status=SUCCESS method=IPVSSmartTvTest.adobesessionCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSTHTest -->
        <test-method status="PASS" signature="testStartup()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="testStartup" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:31Z" finished-at="2019-04-30T04:57:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartup -->
        <test-method status="PASS" signature="adobesessionCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="adobesessionCHTR" duration-ms="448" started-at="2019-04-30T04:57:31Z" finished-at="2019-04-30T04:57:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- adobesessionCHTR -->
        <test-method status="PASS" signature="reportTest(org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="reportTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:31Z" finished-at="2019-04-30T04:57:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=adobesessionCHTR status=SUCCESS method=IPVSSmartTvTest.adobesessionCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportTest -->
        <test-method status="PASS" signature="runCleanupMethods()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="runCleanupMethods" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:31Z" finished-at="2019-04-30T04:57:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCleanupMethods -->
        <test-method status="PASS" signature="setupSTHTest(java.lang.reflect.Method, org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="setupSTHTest" is-config="true" duration-ms="2" started-at="2019-04-30T04:57:31Z" finished-at="2019-04-30T04:57:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sth.ipvs.IPVSSmartTvTest.adobesessionTWC()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=adobesessionTWC status=SUCCESS method=IPVSSmartTvTest.adobesessionTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSTHTest -->
        <test-method status="PASS" signature="testStartup()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="testStartup" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:31Z" finished-at="2019-04-30T04:57:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartup -->
        <test-method status="PASS" signature="adobesessionTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="adobesessionTWC" duration-ms="622" started-at="2019-04-30T04:57:31Z" finished-at="2019-04-30T04:57:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- adobesessionTWC -->
        <test-method status="PASS" signature="reportTest(org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="reportTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:32Z" finished-at="2019-04-30T04:57:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=adobesessionTWC status=SUCCESS method=IPVSSmartTvTest.adobesessionTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportTest -->
        <test-method status="PASS" signature="runCleanupMethods()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="runCleanupMethods" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:32Z" finished-at="2019-04-30T04:57:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCleanupMethods -->
        <test-method status="PASS" signature="setupSTHTest(java.lang.reflect.Method, org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="setupSTHTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:32Z" finished-at="2019-04-30T04:57:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sth.ipvs.IPVSSmartTvTest.bookmarksapiCHTR()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=bookmarksapiCHTR status=SUCCESS method=IPVSSmartTvTest.bookmarksapiCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSTHTest -->
        <test-method status="PASS" signature="testStartup()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="testStartup" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:32Z" finished-at="2019-04-30T04:57:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartup -->
        <test-method status="PASS" signature="bookmarksapiCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="bookmarksapiCHTR" duration-ms="482" started-at="2019-04-30T04:57:32Z" finished-at="2019-04-30T04:57:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bookmarksapiCHTR -->
        <test-method status="PASS" signature="runCleanupMethods()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="runCleanupMethods" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:32Z" finished-at="2019-04-30T04:57:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCleanupMethods -->
        <test-method status="PASS" signature="reportTest(org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="reportTest" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:32Z" finished-at="2019-04-30T04:57:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=bookmarksapiCHTR status=SUCCESS method=IPVSSmartTvTest.bookmarksapiCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportTest -->
        <test-method status="PASS" signature="setupSTHTest(java.lang.reflect.Method, org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="setupSTHTest" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:32Z" finished-at="2019-04-30T04:57:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sth.ipvs.IPVSSmartTvTest.bookmarksapiTWC()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=bookmarksapiTWC status=SUCCESS method=IPVSSmartTvTest.bookmarksapiTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSTHTest -->
        <test-method status="PASS" signature="bookmarksapiTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="bookmarksapiTWC" duration-ms="490" started-at="2019-04-30T04:57:32Z" finished-at="2019-04-30T04:57:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bookmarksapiTWC -->
        <test-method status="PASS" signature="testStartup()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="testStartup" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:32Z" finished-at="2019-04-30T04:57:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartup -->
        <test-method status="PASS" signature="reportTest(org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="reportTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:33Z" finished-at="2019-04-30T04:57:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=bookmarksapiTWC status=SUCCESS method=IPVSSmartTvTest.bookmarksapiTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportTest -->
        <test-method status="PASS" signature="runCleanupMethods()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="runCleanupMethods" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:33Z" finished-at="2019-04-30T04:57:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCleanupMethods -->
        <test-method status="PASS" signature="setupSTHTest(java.lang.reflect.Method, org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="setupSTHTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:33Z" finished-at="2019-04-30T04:57:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sth.ipvs.IPVSSmartTvTest.cdvrgetrecordingsapiCHTR()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=cdvrgetrecordingsapiCHTR status=SUCCESS method=IPVSSmartTvTest.cdvrgetrecordingsapiCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSTHTest -->
        <test-method status="PASS" signature="testStartup()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="testStartup" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:33Z" finished-at="2019-04-30T04:57:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartup -->
        <test-method status="PASS" signature="cdvrgetrecordingsapiCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="cdvrgetrecordingsapiCHTR" duration-ms="3357" started-at="2019-04-30T04:57:33Z" finished-at="2019-04-30T04:57:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cdvrgetrecordingsapiCHTR -->
        <test-method status="PASS" signature="runCleanupMethods()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="runCleanupMethods" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:36Z" finished-at="2019-04-30T04:57:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCleanupMethods -->
        <test-method status="PASS" signature="reportTest(org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="reportTest" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:36Z" finished-at="2019-04-30T04:57:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=cdvrgetrecordingsapiCHTR status=SUCCESS method=IPVSSmartTvTest.cdvrgetrecordingsapiCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportTest -->
        <test-method status="PASS" signature="setupSTHTest(java.lang.reflect.Method, org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="setupSTHTest" is-config="true" duration-ms="2" started-at="2019-04-30T04:57:36Z" finished-at="2019-04-30T04:57:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sth.ipvs.IPVSSmartTvTest.cdvrgetrecordingsapiTWC()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=cdvrgetrecordingsapiTWC status=SUCCESS method=IPVSSmartTvTest.cdvrgetrecordingsapiTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSTHTest -->
        <test-method status="PASS" signature="cdvrgetrecordingsapiTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="cdvrgetrecordingsapiTWC" duration-ms="2948" started-at="2019-04-30T04:57:36Z" finished-at="2019-04-30T04:57:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cdvrgetrecordingsapiTWC -->
        <test-method status="PASS" signature="testStartup()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="testStartup" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:36Z" finished-at="2019-04-30T04:57:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartup -->
        <test-method status="PASS" signature="reportTest(org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="reportTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:39Z" finished-at="2019-04-30T04:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=cdvrgetrecordingsapiTWC status=SUCCESS method=IPVSSmartTvTest.cdvrgetrecordingsapiTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportTest -->
        <test-method status="PASS" signature="runCleanupMethods()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="runCleanupMethods" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:39Z" finished-at="2019-04-30T04:57:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCleanupMethods -->
        <test-method status="PASS" signature="setupSTHTest(java.lang.reflect.Method, org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="setupSTHTest" is-config="true" duration-ms="8" started-at="2019-04-30T04:57:39Z" finished-at="2019-04-30T04:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sth.ipvs.IPVSSmartTvTest.favoritesChannelapiCHTR()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=favoritesChannelapiCHTR status=SUCCESS method=IPVSSmartTvTest.favoritesChannelapiCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSTHTest -->
        <test-method status="PASS" signature="testStartup()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="testStartup" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:39Z" finished-at="2019-04-30T04:57:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartup -->
        <test-method status="PASS" signature="favoritesChannelapiCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="favoritesChannelapiCHTR" duration-ms="368" started-at="2019-04-30T04:57:39Z" finished-at="2019-04-30T04:57:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- favoritesChannelapiCHTR -->
        <test-method status="PASS" signature="reportTest(org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="reportTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:39Z" finished-at="2019-04-30T04:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=favoritesChannelapiCHTR status=SUCCESS method=IPVSSmartTvTest.favoritesChannelapiCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportTest -->
        <test-method status="PASS" signature="runCleanupMethods()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="runCleanupMethods" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:39Z" finished-at="2019-04-30T04:57:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCleanupMethods -->
        <test-method status="PASS" signature="setupSTHTest(java.lang.reflect.Method, org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="setupSTHTest" is-config="true" duration-ms="2" started-at="2019-04-30T04:57:39Z" finished-at="2019-04-30T04:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sth.ipvs.IPVSSmartTvTest.favoritesChannelapiTWC()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=favoritesChannelapiTWC status=SUCCESS method=IPVSSmartTvTest.favoritesChannelapiTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSTHTest -->
        <test-method status="PASS" signature="testStartup()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="testStartup" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:39Z" finished-at="2019-04-30T04:57:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartup -->
        <test-method status="PASS" signature="favoritesChannelapiTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="favoritesChannelapiTWC" duration-ms="348" started-at="2019-04-30T04:57:39Z" finished-at="2019-04-30T04:57:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- favoritesChannelapiTWC -->
        <test-method status="PASS" signature="reportTest(org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="reportTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:40Z" finished-at="2019-04-30T04:57:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=favoritesChannelapiTWC status=SUCCESS method=IPVSSmartTvTest.favoritesChannelapiTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportTest -->
        <test-method status="PASS" signature="runCleanupMethods()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="runCleanupMethods" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:40Z" finished-at="2019-04-30T04:57:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCleanupMethods -->
        <test-method status="PASS" signature="setupSTHTest(java.lang.reflect.Method, org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="setupSTHTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:40Z" finished-at="2019-04-30T04:57:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sth.ipvs.IPVSSmartTvTest.fipsapiCHTR()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=fipsapiCHTR status=SUCCESS method=IPVSSmartTvTest.fipsapiCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSTHTest -->
        <test-method status="PASS" signature="fipsapiCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="fipsapiCHTR" duration-ms="360" started-at="2019-04-30T04:57:40Z" finished-at="2019-04-30T04:57:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fipsapiCHTR -->
        <test-method status="PASS" signature="testStartup()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="testStartup" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:40Z" finished-at="2019-04-30T04:57:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartup -->
        <test-method status="PASS" signature="reportTest(org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="reportTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:40Z" finished-at="2019-04-30T04:57:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=fipsapiCHTR status=SUCCESS method=IPVSSmartTvTest.fipsapiCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportTest -->
        <test-method status="PASS" signature="runCleanupMethods()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="runCleanupMethods" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:40Z" finished-at="2019-04-30T04:57:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCleanupMethods -->
        <test-method status="PASS" signature="setupSTHTest(java.lang.reflect.Method, org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="setupSTHTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:40Z" finished-at="2019-04-30T04:57:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sth.ipvs.IPVSSmartTvTest.fipsapiTWC()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=fipsapiTWC status=SUCCESS method=IPVSSmartTvTest.fipsapiTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSTHTest -->
        <test-method status="PASS" signature="testStartup()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="testStartup" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:40Z" finished-at="2019-04-30T04:57:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartup -->
        <test-method status="PASS" signature="fipsapiTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="fipsapiTWC" duration-ms="369" started-at="2019-04-30T04:57:40Z" finished-at="2019-04-30T04:57:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fipsapiTWC -->
        <test-method status="PASS" signature="reportTest(org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="reportTest" is-config="true" duration-ms="4" started-at="2019-04-30T04:57:41Z" finished-at="2019-04-30T04:57:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=fipsapiTWC status=SUCCESS method=IPVSSmartTvTest.fipsapiTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportTest -->
        <test-method status="PASS" signature="runCleanupMethods()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="runCleanupMethods" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:41Z" finished-at="2019-04-30T04:57:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCleanupMethods -->
        <test-method status="PASS" signature="setupSTHTest(java.lang.reflect.Method, org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="setupSTHTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:41Z" finished-at="2019-04-30T04:57:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sth.ipvs.IPVSSmartTvTest.guidegridapiCHTR()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=guidegridapiCHTR status=SUCCESS method=IPVSSmartTvTest.guidegridapiCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSTHTest -->
        <test-method status="PASS" signature="testStartup()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="testStartup" is-config="true" duration-ms="2" started-at="2019-04-30T04:57:41Z" finished-at="2019-04-30T04:57:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartup -->
        <test-method status="PASS" signature="guidegridapiCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="guidegridapiCHTR" duration-ms="1598" started-at="2019-04-30T04:57:41Z" finished-at="2019-04-30T04:57:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- guidegridapiCHTR -->
        <test-method status="PASS" signature="reportTest(org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="reportTest" is-config="true" duration-ms="2" started-at="2019-04-30T04:57:42Z" finished-at="2019-04-30T04:57:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=guidegridapiCHTR status=SUCCESS method=IPVSSmartTvTest.guidegridapiCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportTest -->
        <test-method status="PASS" signature="runCleanupMethods()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="runCleanupMethods" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:42Z" finished-at="2019-04-30T04:57:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCleanupMethods -->
        <test-method status="PASS" signature="setupSTHTest(java.lang.reflect.Method, org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="setupSTHTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:42Z" finished-at="2019-04-30T04:57:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sth.ipvs.IPVSSmartTvTest.guidegridapiTWC()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=guidegridapiTWC status=SUCCESS method=IPVSSmartTvTest.guidegridapiTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSTHTest -->
        <test-method status="PASS" signature="guidegridapiTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="guidegridapiTWC" duration-ms="1831" started-at="2019-04-30T04:57:42Z" finished-at="2019-04-30T04:57:44Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- guidegridapiTWC -->
        <test-method status="PASS" signature="testStartup()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="testStartup" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:42Z" finished-at="2019-04-30T04:57:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartup -->
        <test-method status="PASS" signature="reportTest(org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="reportTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:44Z" finished-at="2019-04-30T04:57:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=guidegridapiTWC status=SUCCESS method=IPVSSmartTvTest.guidegridapiTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportTest -->
        <test-method status="PASS" signature="runCleanupMethods()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="runCleanupMethods" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:44Z" finished-at="2019-04-30T04:57:44Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCleanupMethods -->
        <test-method status="PASS" signature="setupSTHTest(java.lang.reflect.Method, org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="setupSTHTest" is-config="true" duration-ms="2" started-at="2019-04-30T04:57:44Z" finished-at="2019-04-30T04:57:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sth.ipvs.IPVSSmartTvTest.lineupapiCHTR()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=lineupapiCHTR status=SUCCESS method=IPVSSmartTvTest.lineupapiCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSTHTest -->
        <test-method status="PASS" signature="testStartup()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="testStartup" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:44Z" finished-at="2019-04-30T04:57:44Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartup -->
        <test-method status="PASS" signature="lineupapiCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="lineupapiCHTR" duration-ms="363" started-at="2019-04-30T04:57:44Z" finished-at="2019-04-30T04:57:44Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lineupapiCHTR -->
        <test-method status="PASS" signature="reportTest(org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="reportTest" is-config="true" duration-ms="2" started-at="2019-04-30T04:57:44Z" finished-at="2019-04-30T04:57:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=lineupapiCHTR status=SUCCESS method=IPVSSmartTvTest.lineupapiCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportTest -->
        <test-method status="PASS" signature="runCleanupMethods()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="runCleanupMethods" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:44Z" finished-at="2019-04-30T04:57:44Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCleanupMethods -->
        <test-method status="PASS" signature="setupSTHTest(java.lang.reflect.Method, org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="setupSTHTest" is-config="true" duration-ms="2" started-at="2019-04-30T04:57:44Z" finished-at="2019-04-30T04:57:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sth.ipvs.IPVSSmartTvTest.linuepapiTWC()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=linuepapiTWC status=SUCCESS method=IPVSSmartTvTest.linuepapiTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSTHTest -->
        <test-method status="PASS" signature="testStartup()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="testStartup" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:44Z" finished-at="2019-04-30T04:57:44Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartup -->
        <test-method status="PASS" signature="linuepapiTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="linuepapiTWC" duration-ms="359" started-at="2019-04-30T04:57:44Z" finished-at="2019-04-30T04:57:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linuepapiTWC -->
        <test-method status="PASS" signature="runCleanupMethods()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="runCleanupMethods" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:45Z" finished-at="2019-04-30T04:57:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCleanupMethods -->
        <test-method status="PASS" signature="reportTest(org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="reportTest" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:45Z" finished-at="2019-04-30T04:57:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=linuepapiTWC status=SUCCESS method=IPVSSmartTvTest.linuepapiTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportTest -->
        <test-method status="PASS" signature="setupSTHTest(java.lang.reflect.Method, org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="setupSTHTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:45Z" finished-at="2019-04-30T04:57:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sth.ipvs.IPVSSmartTvTest.locationapiCHTR()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=locationapiCHTR status=FAILURE method=IPVSSmartTvTest.locationapiCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSTHTest -->
        <test-method status="PASS" signature="testStartup()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="testStartup" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:45Z" finished-at="2019-04-30T04:57:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartup -->
        <test-method status="FAIL" signature="locationapiCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="locationapiCHTR" duration-ms="359" started-at="2019-04-30T04:57:45Z" finished-at="2019-04-30T04:57:45Z">
          <exception class="java.lang.RuntimeException">
            <message>
              <![CDATA[error getting json data from https://pi.engnew-spectrum.net/api/smarttv/location/v1?customerGuid=44188798&ip=1.1.1.1&mso=CHARTER&requestId=STHLocation-Charter:
HttpResponse:
HTTP/1.1 500 Internal Server Error
Access-Control-Allow-Headers: WWW-Authenticate,Keep-Alive,User-Agent,X-Requested-With,Cache-Control,Content-Type,X-WayfarerEID
Access-Control-Allow-Methods: GET, DELETE, POST, PUT, OPTIONS
Cache-Control: no-cache,private,no-store
Connection: keep-alive
Content-Length: 33
Content-Type: application/json; charset=utf-8
Date: Tue, 30 Apr 2019 04:57:45 GMT
Failure-Trace: Saint_500_Failure getting BehindOwnModem from saint
Pragma: no-cache
Server: openresty
X-Failure-Message: Failed to obtain BehindOwnModem from saint: Required property [sessionId] not found
X-PI-Datacenter: CTEC
x-trace-id: 440bb648ba0f-4cb3-0000000000033242

{"failure":"InternalServerError"}]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.RuntimeException: error getting json data from https://pi.engnew-spectrum.net/api/smarttv/location/v1?customerGuid=44188798&ip=1.1.1.1&mso=CHARTER&requestId=STHLocation-Charter:
HttpResponse:
HTTP/1.1 500 Internal Server Error
Access-Control-Allow-Headers: WWW-Authenticate,Keep-Alive,User-Agent,X-Requested-With,Cache-Control,Content-Type,X-WayfarerEID
Access-Control-Allow-Methods: GET, DELETE, POST, PUT, OPTIONS
Cache-Control: no-cache,private,no-store
Connection: keep-alive
Content-Length: 33
Content-Type: application/json; charset=utf-8
Date: Tue, 30 Apr 2019 04:57:45 GMT
Failure-Trace: Saint_500_Failure getting BehindOwnModem from saint
Pragma: no-cache
Server: openresty
X-Failure-Message: Failed to obtain BehindOwnModem from saint: Required property [sessionId] not found
X-PI-Datacenter: CTEC
x-trace-id: 440bb648ba0f-4cb3-0000000000033242

{"failure":"InternalServerError"}
at sth.ipvs.CustomRequest.getJson(CustomRequest.java:39)
at sth.ipvs.IPVSSmartTvTest.locationapiCHTR(IPVSSmartTvTest.java:59)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.RuntimeException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- locationapiCHTR -->
        <test-method status="PASS" signature="reportTest(org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="reportTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:45Z" finished-at="2019-04-30T04:57:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=locationapiCHTR status=FAILURE method=IPVSSmartTvTest.locationapiCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportTest -->
        <test-method status="PASS" signature="setupSTHTest(java.lang.reflect.Method, org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="setupSTHTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:45Z" finished-at="2019-04-30T04:57:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sth.ipvs.IPVSSmartTvTest.locationapiTWC()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=locationapiTWC status=FAILURE method=IPVSSmartTvTest.locationapiTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSTHTest -->
        <test-method status="PASS" signature="runCleanupMethods()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="runCleanupMethods" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:45Z" finished-at="2019-04-30T04:57:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCleanupMethods -->
        <test-method status="FAIL" signature="locationapiTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="locationapiTWC" duration-ms="358" started-at="2019-04-30T04:57:45Z" finished-at="2019-04-30T04:57:45Z">
          <exception class="java.lang.RuntimeException">
            <message>
              <![CDATA[error getting json data from https://pi.engnew-spectrum.net/api/smarttv/location/v1?customerGuid=E4EDB341-C62E-E826-7D49-8514CCAB93E9&ip=1.1.1.1&mso=TWC&requestId=STHLocation-TWC:
HttpResponse:
HTTP/1.1 500 Internal Server Error
Access-Control-Allow-Headers: WWW-Authenticate,Keep-Alive,User-Agent,X-Requested-With,Cache-Control,Content-Type,X-WayfarerEID
Access-Control-Allow-Methods: GET, DELETE, POST, PUT, OPTIONS
Cache-Control: no-cache,private,no-store
Connection: keep-alive
Content-Length: 33
Content-Type: application/json; charset=utf-8
Date: Tue, 30 Apr 2019 04:57:46 GMT
Failure-Trace: Saint_500_Failure getting BehindOwnModem from saint
Pragma: no-cache
Server: openresty
Server-Timing: intid;desc=33634ccee829097f
X-Failure-Message: Failed to obtain BehindOwnModem from saint: Required property [sessionId] not found
X-PI-Datacenter: CTEC
x-trace-id: 440bb648ba0f-4cb3-0000000000033253

{"failure":"InternalServerError"}]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.RuntimeException: error getting json data from https://pi.engnew-spectrum.net/api/smarttv/location/v1?customerGuid=E4EDB341-C62E-E826-7D49-8514CCAB93E9&ip=1.1.1.1&mso=TWC&requestId=STHLocation-TWC:
HttpResponse:
HTTP/1.1 500 Internal Server Error
Access-Control-Allow-Headers: WWW-Authenticate,Keep-Alive,User-Agent,X-Requested-With,Cache-Control,Content-Type,X-WayfarerEID
Access-Control-Allow-Methods: GET, DELETE, POST, PUT, OPTIONS
Cache-Control: no-cache,private,no-store
Connection: keep-alive
Content-Length: 33
Content-Type: application/json; charset=utf-8
Date: Tue, 30 Apr 2019 04:57:46 GMT
Failure-Trace: Saint_500_Failure getting BehindOwnModem from saint
Pragma: no-cache
Server: openresty
Server-Timing: intid;desc=33634ccee829097f
X-Failure-Message: Failed to obtain BehindOwnModem from saint: Required property [sessionId] not found
X-PI-Datacenter: CTEC
x-trace-id: 440bb648ba0f-4cb3-0000000000033253

{"failure":"InternalServerError"}
at sth.ipvs.CustomRequest.getJson(CustomRequest.java:39)
at sth.ipvs.IPVSSmartTvTest.locationapiTWC(IPVSSmartTvTest.java:72)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.RuntimeException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- locationapiTWC -->
        <test-method status="PASS" signature="testStartup()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="testStartup" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:45Z" finished-at="2019-04-30T04:57:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartup -->
        <test-method status="PASS" signature="reportTest(org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="reportTest" is-config="true" duration-ms="2" started-at="2019-04-30T04:57:45Z" finished-at="2019-04-30T04:57:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=locationapiTWC status=FAILURE method=IPVSSmartTvTest.locationapiTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportTest -->
        <test-method status="PASS" signature="runCleanupMethods()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="runCleanupMethods" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:45Z" finished-at="2019-04-30T04:57:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCleanupMethods -->
        <test-method status="PASS" signature="setupSTHTest(java.lang.reflect.Method, org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="setupSTHTest" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:45Z" finished-at="2019-04-30T04:57:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sth.ipvs.IPVSSmartTvTest.parentalBlockedChannelsapiCHTR()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=parentalBlockedChannelsapiCHTR status=SUCCESS method=IPVSSmartTvTest.parentalBlockedChannelsapiCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSTHTest -->
        <test-method status="PASS" signature="testStartup()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="testStartup" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:45Z" finished-at="2019-04-30T04:57:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartup -->
        <test-method status="PASS" signature="parentalBlockedChannelsapiCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="parentalBlockedChannelsapiCHTR" duration-ms="3046" started-at="2019-04-30T04:57:45Z" finished-at="2019-04-30T04:57:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- parentalBlockedChannelsapiCHTR -->
        <test-method status="PASS" signature="reportTest(org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="reportTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:49Z" finished-at="2019-04-30T04:57:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=parentalBlockedChannelsapiCHTR status=SUCCESS method=IPVSSmartTvTest.parentalBlockedChannelsapiCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportTest -->
        <test-method status="PASS" signature="runCleanupMethods()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="runCleanupMethods" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:49Z" finished-at="2019-04-30T04:57:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCleanupMethods -->
        <test-method status="PASS" signature="setupSTHTest(java.lang.reflect.Method, org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="setupSTHTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:49Z" finished-at="2019-04-30T04:57:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sth.ipvs.IPVSSmartTvTest.parentalBlockedChannelsapiTWC()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=parentalBlockedChannelsapiTWC status=SUCCESS method=IPVSSmartTvTest.parentalBlockedChannelsapiTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSTHTest -->
        <test-method status="PASS" signature="parentalBlockedChannelsapiTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="parentalBlockedChannelsapiTWC" duration-ms="2598" started-at="2019-04-30T04:57:49Z" finished-at="2019-04-30T04:57:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- parentalBlockedChannelsapiTWC -->
        <test-method status="PASS" signature="testStartup()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="testStartup" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:49Z" finished-at="2019-04-30T04:57:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartup -->
        <test-method status="PASS" signature="reportTest(org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="reportTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:51Z" finished-at="2019-04-30T04:57:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=parentalBlockedChannelsapiTWC status=SUCCESS method=IPVSSmartTvTest.parentalBlockedChannelsapiTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportTest -->
        <test-method status="PASS" signature="setupSTHTest(java.lang.reflect.Method, org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="setupSTHTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:51Z" finished-at="2019-04-30T04:57:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sth.ipvs.IPVSSmartTvTest.parentalcontrolcallCHTR()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=parentalcontrolcallCHTR status=SUCCESS method=IPVSSmartTvTest.parentalcontrolcallCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSTHTest -->
        <test-method status="PASS" signature="runCleanupMethods()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="runCleanupMethods" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:51Z" finished-at="2019-04-30T04:57:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCleanupMethods -->
        <test-method status="PASS" signature="testStartup()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="testStartup" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:51Z" finished-at="2019-04-30T04:57:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartup -->
        <test-method status="PASS" signature="parentalcontrolcallCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="parentalcontrolcallCHTR" duration-ms="373" started-at="2019-04-30T04:57:51Z" finished-at="2019-04-30T04:57:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- parentalcontrolcallCHTR -->
        <test-method status="PASS" signature="reportTest(org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="reportTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:51Z" finished-at="2019-04-30T04:57:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=parentalcontrolcallCHTR status=SUCCESS method=IPVSSmartTvTest.parentalcontrolcallCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportTest -->
        <test-method status="PASS" signature="runCleanupMethods()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="runCleanupMethods" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:51Z" finished-at="2019-04-30T04:57:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCleanupMethods -->
        <test-method status="PASS" signature="testStartup()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="testStartup" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:51Z" finished-at="2019-04-30T04:57:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartup -->
        <test-method status="PASS" signature="setupSTHTest(java.lang.reflect.Method, org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="setupSTHTest" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:51Z" finished-at="2019-04-30T04:57:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sth.ipvs.IPVSSmartTvTest.parentalcontrolcallTWC()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=parentalcontrolcallTWC status=SUCCESS method=IPVSSmartTvTest.parentalcontrolcallTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSTHTest -->
        <test-method status="PASS" signature="parentalcontrolcallTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="parentalcontrolcallTWC" duration-ms="366" started-at="2019-04-30T04:57:51Z" finished-at="2019-04-30T04:57:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- parentalcontrolcallTWC -->
        <test-method status="PASS" signature="runCleanupMethods()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="runCleanupMethods" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:52Z" finished-at="2019-04-30T04:57:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCleanupMethods -->
        <test-method status="PASS" signature="reportTest(org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="reportTest" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:52Z" finished-at="2019-04-30T04:57:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=parentalcontrolcallTWC status=SUCCESS method=IPVSSmartTvTest.parentalcontrolcallTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportTest -->
        <test-method status="PASS" signature="setupSTHTest(java.lang.reflect.Method, org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="setupSTHTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:52Z" finished-at="2019-04-30T04:57:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sth.ipvs.IPVSSmartTvTest.parentalratingapiTWC()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=parentalratingapiTWC status=SUCCESS method=IPVSSmartTvTest.parentalratingapiTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSTHTest -->
        <test-method status="PASS" signature="testStartup()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="testStartup" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:52Z" finished-at="2019-04-30T04:57:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartup -->
        <test-method status="PASS" signature="parentalratingapiTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="parentalratingapiTWC" duration-ms="361" started-at="2019-04-30T04:57:52Z" finished-at="2019-04-30T04:57:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- parentalratingapiTWC -->
        <test-method status="PASS" signature="reportTest(org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="reportTest" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:52Z" finished-at="2019-04-30T04:57:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=parentalratingapiTWC status=SUCCESS method=IPVSSmartTvTest.parentalratingapiTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportTest -->
        <test-method status="PASS" signature="setupSTHTest(java.lang.reflect.Method, org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="setupSTHTest" is-config="true" duration-ms="2" started-at="2019-04-30T04:57:52Z" finished-at="2019-04-30T04:57:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sth.ipvs.IPVSSmartTvTest.parentalratingsapiCHTR()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=parentalratingsapiCHTR status=SUCCESS method=IPVSSmartTvTest.parentalratingsapiCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSTHTest -->
        <test-method status="PASS" signature="runCleanupMethods()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="runCleanupMethods" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:52Z" finished-at="2019-04-30T04:57:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCleanupMethods -->
        <test-method status="PASS" signature="testStartup()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="testStartup" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:52Z" finished-at="2019-04-30T04:57:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartup -->
        <test-method status="PASS" signature="parentalratingsapiCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="parentalratingsapiCHTR" duration-ms="365" started-at="2019-04-30T04:57:52Z" finished-at="2019-04-30T04:57:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- parentalratingsapiCHTR -->
        <test-method status="PASS" signature="runCleanupMethods()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="runCleanupMethods" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:53Z" finished-at="2019-04-30T04:57:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCleanupMethods -->
        <test-method status="PASS" signature="reportTest(org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="reportTest" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:53Z" finished-at="2019-04-30T04:57:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=parentalratingsapiCHTR status=SUCCESS method=IPVSSmartTvTest.parentalratingsapiCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportTest -->
        <test-method status="PASS" signature="setupSTHTest(java.lang.reflect.Method, org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="setupSTHTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:53Z" finished-at="2019-04-30T04:57:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sth.ipvs.IPVSSmartTvTest.watchListapiCHTR()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=watchListapiCHTR status=SUCCESS method=IPVSSmartTvTest.watchListapiCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSTHTest -->
        <test-method status="PASS" signature="testStartup()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="testStartup" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:53Z" finished-at="2019-04-30T04:57:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartup -->
        <test-method status="PASS" signature="watchListapiCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="watchListapiCHTR" duration-ms="458" started-at="2019-04-30T04:57:53Z" finished-at="2019-04-30T04:57:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- watchListapiCHTR -->
        <test-method status="PASS" signature="reportTest(org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="reportTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:53Z" finished-at="2019-04-30T04:57:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=watchListapiCHTR status=SUCCESS method=IPVSSmartTvTest.watchListapiCHTR()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportTest -->
        <test-method status="PASS" signature="runCleanupMethods()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="runCleanupMethods" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:53Z" finished-at="2019-04-30T04:57:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCleanupMethods -->
        <test-method status="PASS" signature="setupSTHTest(java.lang.reflect.Method, org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="setupSTHTest" is-config="true" duration-ms="3" started-at="2019-04-30T04:57:53Z" finished-at="2019-04-30T04:57:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sth.ipvs.IPVSSmartTvTest.watchListapiTWC()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=watchListapiTWC status=SUCCESS method=IPVSSmartTvTest.watchListapiTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSTHTest -->
        <test-method status="PASS" signature="testStartup()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="testStartup" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:53Z" finished-at="2019-04-30T04:57:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartup -->
        <test-method status="PASS" signature="watchListapiTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="watchListapiTWC" duration-ms="449" started-at="2019-04-30T04:57:53Z" finished-at="2019-04-30T04:57:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- watchListapiTWC -->
        <test-method status="PASS" signature="reportTest(org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="reportTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:53Z" finished-at="2019-04-30T04:57:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=watchListapiTWC status=SUCCESS method=IPVSSmartTvTest.watchListapiTWC()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportTest -->
        <test-method status="PASS" signature="runCleanupMethods()[pri:0, instance:sth.ipvs.IPVSSmartTvTest@2e32ccc5]" name="runCleanupMethods" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:54Z" finished-at="2019-04-30T04:57:54Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCleanupMethods -->
      </class> <!-- sth.ipvs.IPVSSmartTvTest -->
      <class name="sth.ipvs.IPVSJiraTicketTest">
        <test-method status="PASS" signature="setupSTHTest(java.lang.reflect.Method, org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSJiraTicketTest@3224a577]" name="setupSTHTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:23Z" finished-at="2019-04-30T04:57:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sth.ipvs.IPVSJiraTicketTest.SVIPVS547()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=SVIPVS547 status=FAILURE method=IPVSJiraTicketTest.SVIPVS547()[pri:0, instance:sth.ipvs.IPVSJiraTicketTest@3224a577] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSTHTest -->
        <test-method status="PASS" signature="testStartup()[pri:0, instance:sth.ipvs.IPVSJiraTicketTest@3224a577]" name="testStartup" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:23Z" finished-at="2019-04-30T04:57:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartup -->
        <test-method status="FAIL" signature="SVIPVS547()[pri:0, instance:sth.ipvs.IPVSJiraTicketTest@3224a577]" name="SVIPVS547" duration-ms="274" started-at="2019-04-30T04:57:23Z" finished-at="2019-04-30T04:57:23Z">
          <exception class="java.lang.RuntimeException">
            <message>
              <![CDATA[error getting json data from https://pi.engnew-spectrum.net/auth/jwt/token?customerGuid=E4EDB341-C62E-E826-7D49-8514CCAB93E9&requestId=SVIPVS-547:
HttpResponse:
HTTP/1.1 404 Not Found
Connection: keep-alive
Content-Length: 42
Content-Type: text/plain; charset=UTF-8
Date: Tue, 30 Apr 2019 04:57:24 GMT
Server: openresty
X-PI-Datacenter: CTEC
X-PI-Latency: 1 millisecond
x-trace-id: 440bb648ba0f-4cb3-00000000000331ce

The requested resource could not be found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.RuntimeException: error getting json data from https://pi.engnew-spectrum.net/auth/jwt/token?customerGuid=E4EDB341-C62E-E826-7D49-8514CCAB93E9&requestId=SVIPVS-547:
HttpResponse:
HTTP/1.1 404 Not Found
Connection: keep-alive
Content-Length: 42
Content-Type: text/plain; charset=UTF-8
Date: Tue, 30 Apr 2019 04:57:24 GMT
Server: openresty
X-PI-Datacenter: CTEC
X-PI-Latency: 1 millisecond
x-trace-id: 440bb648ba0f-4cb3-00000000000331ce

The requested resource could not be found.
at sth.ipvs.CustomRequest.getJson(CustomRequest.java:39)
at sth.ipvs.IPVSJiraTicketTest.SVIPVS547(IPVSJiraTicketTest.java:50)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.RuntimeException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SVIPVS547 -->
        <test-method status="PASS" signature="reportTest(org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSJiraTicketTest@3224a577]" name="reportTest" is-config="true" duration-ms="6" started-at="2019-04-30T04:57:23Z" finished-at="2019-04-30T04:57:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SVIPVS547 status=FAILURE method=IPVSJiraTicketTest.SVIPVS547()[pri:0, instance:sth.ipvs.IPVSJiraTicketTest@3224a577] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportTest -->
        <test-method status="PASS" signature="runCleanupMethods()[pri:0, instance:sth.ipvs.IPVSJiraTicketTest@3224a577]" name="runCleanupMethods" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:23Z" finished-at="2019-04-30T04:57:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCleanupMethods -->
        <test-method status="PASS" signature="setupSTHTest(java.lang.reflect.Method, org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSJiraTicketTest@3224a577]" name="setupSTHTest" is-config="true" duration-ms="2" started-at="2019-04-30T04:57:23Z" finished-at="2019-04-30T04:57:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sth.ipvs.IPVSJiraTicketTest.SVIPVS579OTTdisabled()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=SVIPVS579OTTdisabled status=SUCCESS method=IPVSJiraTicketTest.SVIPVS579OTTdisabled()[pri:0, instance:sth.ipvs.IPVSJiraTicketTest@3224a577] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSTHTest -->
        <test-method status="PASS" signature="testStartup()[pri:0, instance:sth.ipvs.IPVSJiraTicketTest@3224a577]" name="testStartup" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:23Z" finished-at="2019-04-30T04:57:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartup -->
        <test-method status="PASS" signature="SVIPVS579OTTdisabled()[pri:0, instance:sth.ipvs.IPVSJiraTicketTest@3224a577]" name="SVIPVS579OTTdisabled" duration-ms="398" started-at="2019-04-30T04:57:23Z" finished-at="2019-04-30T04:57:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SVIPVS579OTTdisabled -->
        <test-method status="PASS" signature="reportTest(org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSJiraTicketTest@3224a577]" name="reportTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:24Z" finished-at="2019-04-30T04:57:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SVIPVS579OTTdisabled status=SUCCESS method=IPVSJiraTicketTest.SVIPVS579OTTdisabled()[pri:0, instance:sth.ipvs.IPVSJiraTicketTest@3224a577] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportTest -->
        <test-method status="PASS" signature="setupSTHTest(java.lang.reflect.Method, org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSJiraTicketTest@3224a577]" name="setupSTHTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:24Z" finished-at="2019-04-30T04:57:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sth.ipvs.IPVSJiraTicketTest.SVIPVS579OTTenabled()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=SVIPVS579OTTenabled status=SUCCESS method=IPVSJiraTicketTest.SVIPVS579OTTenabled()[pri:0, instance:sth.ipvs.IPVSJiraTicketTest@3224a577] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSTHTest -->
        <test-method status="PASS" signature="runCleanupMethods()[pri:0, instance:sth.ipvs.IPVSJiraTicketTest@3224a577]" name="runCleanupMethods" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:24Z" finished-at="2019-04-30T04:57:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCleanupMethods -->
        <test-method status="PASS" signature="testStartup()[pri:0, instance:sth.ipvs.IPVSJiraTicketTest@3224a577]" name="testStartup" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:24Z" finished-at="2019-04-30T04:57:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartup -->
        <test-method status="PASS" signature="SVIPVS579OTTenabled()[pri:0, instance:sth.ipvs.IPVSJiraTicketTest@3224a577]" name="SVIPVS579OTTenabled" duration-ms="365" started-at="2019-04-30T04:57:24Z" finished-at="2019-04-30T04:57:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SVIPVS579OTTenabled -->
        <test-method status="PASS" signature="reportTest(org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSJiraTicketTest@3224a577]" name="reportTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:24Z" finished-at="2019-04-30T04:57:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SVIPVS579OTTenabled status=SUCCESS method=IPVSJiraTicketTest.SVIPVS579OTTenabled()[pri:0, instance:sth.ipvs.IPVSJiraTicketTest@3224a577] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportTest -->
        <test-method status="PASS" signature="runCleanupMethods()[pri:0, instance:sth.ipvs.IPVSJiraTicketTest@3224a577]" name="runCleanupMethods" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:24Z" finished-at="2019-04-30T04:57:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCleanupMethods -->
        <test-method status="PASS" signature="setupSTHTest(java.lang.reflect.Method, org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSJiraTicketTest@3224a577]" name="setupSTHTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:24Z" finished-at="2019-04-30T04:57:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sth.ipvs.IPVSJiraTicketTest.SVIPVS657()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=SVIPVS657 status=SUCCESS method=IPVSJiraTicketTest.SVIPVS657()[pri:0, instance:sth.ipvs.IPVSJiraTicketTest@3224a577] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSTHTest -->
        <test-method status="PASS" signature="testStartup()[pri:0, instance:sth.ipvs.IPVSJiraTicketTest@3224a577]" name="testStartup" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:24Z" finished-at="2019-04-30T04:57:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartup -->
        <test-method status="PASS" signature="SVIPVS657()[pri:0, instance:sth.ipvs.IPVSJiraTicketTest@3224a577]" name="SVIPVS657" duration-ms="417" started-at="2019-04-30T04:57:24Z" finished-at="2019-04-30T04:57:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SVIPVS657 -->
        <test-method status="PASS" signature="reportTest(org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSJiraTicketTest@3224a577]" name="reportTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:25Z" finished-at="2019-04-30T04:57:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SVIPVS657 status=SUCCESS method=IPVSJiraTicketTest.SVIPVS657()[pri:0, instance:sth.ipvs.IPVSJiraTicketTest@3224a577] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportTest -->
        <test-method status="PASS" signature="runCleanupMethods()[pri:0, instance:sth.ipvs.IPVSJiraTicketTest@3224a577]" name="runCleanupMethods" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:25Z" finished-at="2019-04-30T04:57:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCleanupMethods -->
      </class> <!-- sth.ipvs.IPVSJiraTicketTest -->
      <class name="sth.ipvs.IPVSCapabilitiesTest">
        <test-method status="PASS" signature="initializeIPVS()[pri:0, instance:sth.ipvs.IPVSCapabilitiesTest@f627d13]" name="initializeIPVS" is-config="true" duration-ms="813" started-at="2019-04-30T04:57:19Z" finished-at="2019-04-30T04:57:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializeIPVS -->
        <test-method status="PASS" signature="setupSTHTest(java.lang.reflect.Method, org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSCapabilitiesTest@f627d13]" name="setupSTHTest" is-config="true" duration-ms="12" started-at="2019-04-30T04:57:20Z" finished-at="2019-04-30T04:57:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sth.ipvs.IPVSCapabilitiesTest.ipvscapabilitiescallCHTR()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=ipvscapabilitiescallCHTR status=SUCCESS method=IPVSCapabilitiesTest.ipvscapabilitiescallCHTR()[pri:0, instance:sth.ipvs.IPVSCapabilitiesTest@f627d13] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSTHTest -->
        <test-method status="PASS" signature="testStartup()[pri:0, instance:sth.ipvs.IPVSCapabilitiesTest@f627d13]" name="testStartup" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:20Z" finished-at="2019-04-30T04:57:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartup -->
        <test-method status="PASS" signature="ipvscapabilitiescallCHTR()[pri:0, instance:sth.ipvs.IPVSCapabilitiesTest@f627d13]" name="ipvscapabilitiescallCHTR" duration-ms="2960" started-at="2019-04-30T04:57:20Z" finished-at="2019-04-30T04:57:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ipvscapabilitiescallCHTR -->
        <test-method status="PASS" signature="reportTest(org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSCapabilitiesTest@f627d13]" name="reportTest" is-config="true" duration-ms="63" started-at="2019-04-30T04:57:23Z" finished-at="2019-04-30T04:57:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ipvscapabilitiescallCHTR status=SUCCESS method=IPVSCapabilitiesTest.ipvscapabilitiescallCHTR()[pri:0, instance:sth.ipvs.IPVSCapabilitiesTest@f627d13] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportTest -->
        <test-method status="PASS" signature="runCleanupMethods()[pri:0, instance:sth.ipvs.IPVSCapabilitiesTest@f627d13]" name="runCleanupMethods" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:23Z" finished-at="2019-04-30T04:57:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCleanupMethods -->
        <test-method status="PASS" signature="setupSTHTest(java.lang.reflect.Method, org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSCapabilitiesTest@f627d13]" name="setupSTHTest" is-config="true" duration-ms="2" started-at="2019-04-30T04:57:23Z" finished-at="2019-04-30T04:57:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sth.ipvs.IPVSCapabilitiesTest.ipvscapabilitiescallTWC()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=ipvscapabilitiescallTWC status=SUCCESS method=IPVSCapabilitiesTest.ipvscapabilitiescallTWC()[pri:0, instance:sth.ipvs.IPVSCapabilitiesTest@f627d13] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSTHTest -->
        <test-method status="PASS" signature="testStartup()[pri:0, instance:sth.ipvs.IPVSCapabilitiesTest@f627d13]" name="testStartup" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:23Z" finished-at="2019-04-30T04:57:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartup -->
        <test-method status="PASS" signature="ipvscapabilitiescallTWC()[pri:0, instance:sth.ipvs.IPVSCapabilitiesTest@f627d13]" name="ipvscapabilitiescallTWC" duration-ms="367" started-at="2019-04-30T04:57:23Z" finished-at="2019-04-30T04:57:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ipvscapabilitiescallTWC -->
        <test-method status="PASS" signature="reportTest(org.testng.ITestResult)[pri:0, instance:sth.ipvs.IPVSCapabilitiesTest@f627d13]" name="reportTest" is-config="true" duration-ms="1" started-at="2019-04-30T04:57:23Z" finished-at="2019-04-30T04:57:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ipvscapabilitiescallTWC status=SUCCESS method=IPVSCapabilitiesTest.ipvscapabilitiescallTWC()[pri:0, instance:sth.ipvs.IPVSCapabilitiesTest@f627d13] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportTest -->
        <test-method status="PASS" signature="runCleanupMethods()[pri:0, instance:sth.ipvs.IPVSCapabilitiesTest@f627d13]" name="runCleanupMethods" is-config="true" duration-ms="0" started-at="2019-04-30T04:57:23Z" finished-at="2019-04-30T04:57:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCleanupMethods -->
      </class> <!-- sth.ipvs.IPVSCapabilitiesTest -->
    </test> <!-- Command line test -->
  </suite> <!-- Command line suite -->
</testng-results>
